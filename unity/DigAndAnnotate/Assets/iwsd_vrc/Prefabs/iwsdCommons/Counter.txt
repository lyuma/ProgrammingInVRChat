
# iwsdSingleDigitPanel

呼び出された回数をカウントする方式の数値表示パネル

特徴：
・各桁が独立した部品
・間はカスタムトリガーでつないでいる。桁数を増やすのが容易
・呼び出し回数として値を取り出せる
・表示進数切り替え
・各桁は直接代入可


## サンプル：
数を加算し別の進数で表示できる。というデモ


## known issue
アニメーション遷移のタイミングは要調整かも知れない。
負荷がかかり FPS が下がっている状況でのテストは行われていない。


# 典型設定


## 下位に桁無し（＝最下位桁のみ）
OnCount        他所の最下位 Increment  // 他へ流し込む
OnNoMoreCarry  自身 FeedCount=false; // ダウンカウント終了

## 下位に桁あり（＝中間桁、最上位桁）
OnCount        自身 FeedCount=false; 下位桁 CarryBack=true; 下位桁 FeedCount=true;  // 下位へ繰り下げ、動作させる
OnNoMoreCarry  自身 FeedCount=false; 下位桁 OnNoMoreCarry=true; // 自身は終了、下位桁に継続が無いことを伝達

## 上位に桁あり（＝中間桁、最下位桁）
OnOver         上位桁 Increment  // 繰り上げ
OnUnder        上位桁 Decrement  // 繰り下げ 
OnCountZero    自身 FeedCount=false;  上位桁 FeedCount=true; // 自分はいったん止まり、上位桁から引き出してくる

## 上位に桁なし（＝最上位桁）
OnOver         空 // オーバーフローを無視
OnUnder        空 // アンダーフローを無視
OnCountZero    空 // NoMoreCarry=true で運用するので起きない。 あるいは OnNoMoreCarry と同じにする




# 技術仕様

（自分で忘れてしまいそうなので備忘）


## ダウンカウント動作 FeedCount モード

外部に書き出す機能。

実際に値を書き換えてしまう。値は保持されない。

FeedCount によって制御する

（値を外部へ与えるモード）

ダウンカウンタとして機能することになる。

下の桁から FeedCount を伝播
上の桁から CarryBack および NoMoreCarry を伝播する。


## Animation parameters (Input)

この部品への入力指示はアニメーション・パラメタによって実装されている。
以下、アニメーション・パラメタの意味を説明する。

### Int Radix
基数。
2,10,16 が有効。
初期は 10。
値が入っている状態での変更の結果は未定義（仕様定義しない）。

（現在の実装では保持値を変化させない。10進数なのに12が入っている、という事が起きる）
値は維持され続ける。

### SetValue
値を直接に設定する指示。
0 から Radix-1 までが有効値。

-1 はその指示がないことを表す。通常は -1 にしておく。
部品は取り込むと -1 に書き換える。

### Bool Increment
値を一つ増やす指示。

部品は実行すると false に書き換える。

### Bool Decrement
値を一つ減らす指示。

部品は実行すると false に書き換える。

### Bool FeedCount
FeedCount 動作を行わせる。

外部で制御するものであり部品は自身では書き換えない。
カウントダウン動作させて良い準備が整ったら true にし、
値の取り出し後その処理をするのに時間がかかるのであればそのフレームで false にすること。

（例：二桁のダウンカウントの応用を作る場合に、
上位桁で FeedCount を行わせ下位桁に繰り下げた直後に false にする。
下位桁の count 掃き出しが終わったら再び true にする。）

### Bool CarryBack
FeedCount モードにおいて、上位桁からの繰り下がりが起きたことを指示する。

部品が指示を実行すると内部の値は Radix になる。
（Radix 進数において本来は表示がない Radix という値になっているので、
FeedCount が false である時にこれを true にした直後のフレームで停止すると、
一時的に表示は正しくなくなる。）

指示を実行すると false に書き換える。

### Bool NoMoreCarry
FeedCount モードにおいて、上位桁からもう繰り下がりは起きないことを指示する。

これは上位桁は全てゼロであることを意味する。

部品は自身では書き換えない。

### Bool ConstTrue
これは例外的に入力ではない。変更してはいけない。

常に真にしておき内部で遷移条件に利用している。


## Custom triggers (Output)

この部品からの状態変化に伴う出力はカスタム・トリガーとして実装されている。
利用者は必要におじてその内容を書き換える。

以下、カスタム・トリガーの意味を説明する。

### OnOver

オーバーフローが起きたことを通知する。値はゼロになっている。

この時の動作として、上位桁に対して Increment アニメーション・パラメタを True にすれば、
二桁の繰り上がりが実現される。

### OnUnder

アンダーフローが起きたことを通知する。値は Radix-1 になっている。

この時の動作として、上位桁に対して Decrement アニメーション・パラメタを True にすれば、
二桁の繰り下がりが実現される。

### OnCount

FeedCount モードにおいて、一つカウントできたことを通知する。

直前と比べて値は、ゼロの時には Radix-1 に、その他では一つ小さくなっている。
Carry

### OnCountZero

FeedCount モードにおいて上位桁に値が有る状況でゼロに達していることを通知する。

より正確に言えば、すでに値がゼロである時に FeedCount が有効になり、
かつ NoMoreCarry ではない時に呼び出される。

通常の応用では、繰り下がりの処理のために上位桁の FeedCount を有効にする処理をおこなうことになる。
最上位の桁では NoMoreCarry を固定的に有効にしておき、このトリガーは起きないようにする。

### OnNoMoreCarry

FeedCount モードにおいて上位桁に値が無い状況でゼロに達していることを通知する。

より正確に言えば、すでに値がゼロである時に FeedCount が有効になり、
かつ NoMoreCarry である時に呼び出される。

通常の応用では、もう値は無いので下位桁の NoMoreCarry を有効にするFeedCount を有効にする処理をおこなうことになる。

注意：
入力であるアニメーション・パラメタの NoMoreCarry と
出力であるカスタム・トリガーの NoMoreCarry は同名ではあるが、意味が異なる。
入力は上位が NoMoreCarry であることを意味していて出力は自身が NoMoreCarry であることを意味している。
自身の NoMoreCarry が発せられるには上位から NoMoreCarry を受けるのが前提であるが、
それを下位に発するには自身がゼロになるまでの間がある。


### _ResetOps

内部処理を実行するトリガーであり、書き換えてはいけない。

外部から指示されたアニメーションパラメタを


## 表示画像

4x4 に分割
左下が0 その右が 1
3 は 0 の上。
右上が F (16)

アニメーション・コントローラから見て
View/Quad/Material._MainTex
の Tiling と Offset を書き換えることで値を表示する。



## 内部仕様

### 設計メモ

アニメーション
- Value0, Value1, ... がそれぞれの数値保持の状態
- それぞれに一つ上下への遷移がある。（インクリメントとデクリメント）
- 端には繰り上がり（～Over）と、繰り下がり（～Under）の処置がある
    - （進数ごとに必要。2,10,16進数に対応）
- Count21 などはダウンカウンタとして自動的に値を下げていく動き
    - ここの繰り下がりがややこしいので注意
    - 基本的に下の桁から「値をくれ」要求を伝播させていき、上の桁から「もう無いよ」を伝播する発想になっている。

全体をダウンカウンタとして全値を吐き出す時の繰り下がり処理が面倒なところだった。
下の桁から上の桁に「繰り下げ要求」を出し、上の桁からは「繰り下げるよ」と「もう値ないよ」を返していく。「もう値ないよ」は保持しておき下の桁から「繰り下げ要求」がきたら「もう値ないよ」を返す、という具合

繰り下げを受け取るところは興味深い。
「上の桁から繰り下げてきたけど下の桁の準備がまだなので保留」という状態がある。
本来の進数表記には現れないものが出てくる。


この方式のデメリット
- 計算に時間がかかる事。

この方式のメリット
- 組み合わせが可能である
- 複数の値を足すなどをアニメーションではなくトリガーで組める。
- 一見複雑であるが構造としては単純
    - 拡張性がある（遷移を追加することで機能を増やせる）

きっかけ
-  https://twitter.com/ayr_suzu/status/1047870194117357569
- AnimationIntSubtractで-1していきながら「まだ正ならばこの仕組みを一回叩く」というようにすれば
  Animation parameter の Int 値表示できるはず。
- 時間がかかるけども。
- 実用的には壊してしまうので書き戻しとか必要ではある。
- 現在の VRChat では数値を直接的に扱えない。
    - animtion int の演算は出来るが、今いくつであるのかは分からない。
    - 対応する数が限られていればアニメーション遷移を書く事で対応できるが、任意の数は扱えない
    - この方式ならば任意の値が扱える。

ポエム・考察
- これを組んでいたらソフトを作っているのでなくICをワイヤリングしている気分になった。
- 描画フレーム : システム最小クロック
- アニメーションパラメタ : インプットポート
- カスタムトリガ呼び出し : アウトプットポート操作
- アニメーションの設定 : 素子の内部状態遷移実装
そういう特殊な IC を設計出来て、その上でそれらをチクチクつないで装置にするという見方。

これを構成する部分は機械的に行えるはずで
（電子回路におけるロジックからの回路合成のように）
もっと高水準な記述からこれらアニメータの記述にコンパイルできるのかもしれない。


future work

直接書き出し指示
別のインスタンスに対して SetValue パラメタを呼ぶ、
値ごとにアニメーションクリップ、および状態を作る必要があるので、
さしあたり実装していない。
高速に転送することができる

シフト動作の実装はあり得る。

進数変化を伴わないのであれば、各桁はそのまま足し込んでいいので高速動作は可能。
ただし、各桁の処理は同時には行えないので、外部に各桁づつ制御機構が必要

発展
文字コードとして表示する機構を考えられる

あ。これ各桁表示を縦横に数十並べて、数値を文字コードとして解釈しなおして文字で表示して、上下左右への値書き出しとその全体制御を作ると、キャラクタディスプレイになるのでは




## Bug 記録

### 1
書き出した後、別モードにしてダウン、00 から反応なし
SetValue (0) が to self  state disable だったので、
取り込みが遅れていて、そのあとの動作で取り込んだ。
本来なら Radix-1 になっていないといけない状況で 0 になった。
対処：自身への遷移ありにして即時に SetValue を消化する様に

### 2
三桁にした時に 最上位の繰り下がりで 真ん中の桁 が動かない

CarryBack の受取遷移と
0 から FeedCount 有効時の遷移 Count00 (or NoMoreCarryCount00)の競合が起きて
そちらがたまたま（？）優先され0にとどまっている。
真ん中の桁が OnCountZero で 上位桁に要求しに行く時に自身を FeedCount を無効化するようにしたうえで、
どうやって再度有効にするか？
上位桁が OnCount で 下位に FeedCount する時に合わせて FeedCount を有効にするようにした。

これは必ずしも自明ではないかもしれないが
（上位側だけのタイミングで FeedCount を続行してよいのか？という問題と言える）
実用的には多数桁のカウントダウンでは必ずこうなるはずなので、よしとした。

この時0からのカウントダウン遷移（Count00 or NoMoreCarryCount00）と
CarryBack の受取（DecCarryBack など）がレースコンディション（というか両方成り立つ）
になっていたためにしばし悩んだ。
Count00 および NoMoreCarryCount00 の方の条件に not CarryBack を入れることで解消した。

---
end
